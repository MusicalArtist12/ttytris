int gimmeCredit;
int gimmeCreditA, gimmeCreditB;

int numLinesCleared;
int score;

#include "utils.bC"
#include "spriteUtils.bC"
#include "queue.bC"
#include "board.bC"
#include "keybinds.bC"
#include "gameFunctions.bC"


drawGame(int board[], boardSize[]; char queue[]; char held) {
    
    static char lastHeld: '\0';
    static int lastQueueChecksum: 0;

    int currentQueueChecksum;
    
    static int heldSprite[HELD_SPRITE_SIZE];
    static int heldSpriteSize[2];

    static int boardSprite[BOARD_SPRITE_SIZE];
    static int boardSpriteSize[2];
    
    static int queueOutput[QUEUE_SPRITE_SIZE];
    static int queueSpriteSize[2];
    
    int screenSprite[900];
    int screenSpriteSize[2];

    screenSpriteSize[0] = 30; // board width
    screenSpriteSize[1] = 30; // board width + heldspritewidth + queuewidth

    flashArray(screenSprite, 2);

    currentQueueChecksum = generateQueueChecksum(queue);

    if lastHeld != held then {
        flashArray(heldSprite, 0);
        loadHeldSprite(held, heldSprite, heldSpriteSize);
    }

    if currentQueueChecksum != lastQueueChecksum then {
        flashArray(queueOutput, 0);
        loadQueueSprite(queue, queueOutput, queueSpriteSize);
        lastQueueChecksum = currentQueueChecksum;
    }

    flashArray(boardSprite, 0);
    loadBoardSprite(board, boardSize, boardSprite, boardSpriteSize);
    
    placeSprite(screenSprite, screenSpriteSize, heldSprite, heldSpriteSize, 1, 1);
    placeSprite(screenSprite, screenSpriteSize, boardSprite, boardSpriteSize, 1 + heldSpriteSize[1], 1);
    placeSprite(screenSprite, screenSpriteSize, queueOutput, queueSpriteSize,  1 + heldSpriteSize[1] + boardSpriteSize[1], 1);

    // outputsprite(outputboard, OUTPUTBOARDSIZE, "üÆê", "üÆñ", "‚ñà", "", "ü≠Ω");
    // outputsprite(queueOutput, QUEUEOUTPUTSIZE, "‚ñà", "üÆñ", "", "", "");
    // outputsprite(sprite, SPRITESIZE, "‚ñà", "", "", "", " ");

    // outputstr("Checksums:"); output(currentQueueChecksum); output(lastQueueChecksum);

    outnl();
    outputstr("Current Score: "); output(score); outnl();
    outputstr("Lines Cleared: "); output(numLinesCleared); outnl();
    outputsprite(screenSprite, screenSpriteSize, "‚ñà‚ñà", "üÆñüÆñ", "üÆêüÆê", "ü≠Ωü≠æ", "  ");
}

intro() {
    char temp: '\0';

    outnl();

    outputstr("‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ññ  ‚ñó‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ñÑ‚ññ"); outnl();
    outputstr("  ‚ñà    ‚ñà   ‚ñù‚ñö‚ñû‚ñò   ‚ñà  ‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå   "); outnl();
    outputstr("  ‚ñà    ‚ñà    ‚ñê‚ñå    ‚ñà  ‚ñê‚ñõ‚ñÄ‚ñö‚ññ  ‚ñà   ‚ñù‚ñÄ‚ñö‚ññ"); outnl();
    outputstr("  ‚ñà    ‚ñà    ‚ñê‚ñå    ‚ñà  ‚ñê‚ñå ‚ñê‚ñå‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ñû‚ñò"); outnl();

    outnl();

    outputstr("Julia Abdel-Monem, 2024"); outnl();
    outputstr("Written in bC"); outnl();
    outnl();
    outputstr("No affiliation with The Tetris Company or Tetris (r)"); outnl();
    outputstr("version v1.0"); outnl();

    outnl();

    // start output
    outputstr("this game runs in an infinite loop");
    outnl();
    outputstr("please disable the ant score; bort limit and output limit before running");
    outnl();
    outnl();
    outputstr("press enter to continue or q to quit");
    outnl();
    
    temp = '\0';
    while temp != '\n' do {
        temp = inputc();
     
        if temp == 'q' then {
            return;
        }
    }

    outputstr("Goal: Clear 40 lines"); outnl();

    outnl();

    outputstr("Changes from traditional tetris"); outnl();
    outputstr("due to technical limitations, you must hard drop a piece to lock it in place"); outnl();
    outputstr("gravity does not exist - you are free to rotate a piece as much as you want without it falling"); outnl();
    outputstr("board only updates if a change occurs."); outnl();

    outnl();

    displayControls();

    outnl();

    outputstr("pressing enter with a blank input repeats the last sent command"); outnl();
    
    outputstr("press enter to start"); outnl();

}

main() {

    int SRSOffsetDataN[10]; 
    int SRSOffsetDataR[10]; 
    int SRSOffsetDataF[10]; 
    int SRSOffsetDataL[10]; 

    int iSRSOffsetDataN[10]; 
    int iSRSOffsetDataR[10]; 
    int iSRSOffsetDataF[10]; 
    int iSRSOffsetDataL[10]; 

    int oSRSOffsetDataN[2]; 
    int oSRSOffsetDataR[2]; 
    int oSRSOffsetDataF[2]; 
    int oSRSOffsetDataL[2]; 

    int index;

    int boardSpriteData[BOARD_SIZE]; // 20 col, 10 row
    int boardSpriteSize[2];

    char queue[QUEUE_SIZE]; 

    // x, y, rot;
    int locationData[3];
    int fallbackData[3];

    char currentPiece; // from SHAPES
    int currentPieceData[SPRITE_SIZE];
    int currentPieceSize[2];

    char input, heldSprite: ' ', temp: '\0';

    int placementStatus, linesCleared; // used for hard-drop scoring

    bool canSwap: true, spawnPiece: false, grabNewPiece: true, endGame: false, lastMoveWasSpin: false;

    TETRASPRITESIZE[0] = SPRITE_HEIGHT;
    TETRASPRITESIZE[1] = SPRITE_WIDTH;

    currentPieceSize = TETRASPRITESIZE;

    canSwap = not not true;

    boardSpriteSize[0] = BOARD_HEIGHT;
    boardSpriteSize[1] = BOARD_WIDTH;

    locationData[0] = STARTING_X;
    locationData[1] = STARTING_Y;
    locationData[2] = 0;

    numLinesCleared = 0;
    score = 0;
    
    SRSOffsetDataN[0] = 0; SRSOffsetDataN[1] = 0; 
    SRSOffsetDataN[2] = 0; SRSOffsetDataN[3] = 0; 
    SRSOffsetDataN[4] = 0; SRSOffsetDataN[5] = 0; 
    SRSOffsetDataN[6] = 0; SRSOffsetDataN[7] = 0; 
    SRSOffsetDataN[8] = 0; SRSOffsetDataN[9] = 0; 

    SRSOffsetDataR[0] = 0; SRSOffsetDataR[1] = 0; 
    SRSOffsetDataR[2] = 1; SRSOffsetDataR[3] = 0; 
    SRSOffsetDataR[4] = 1; SRSOffsetDataR[5] = -1; 
    SRSOffsetDataR[6] = 0; SRSOffsetDataR[7] = 2; 
    SRSOffsetDataR[8] = 1; SRSOffsetDataR[9] = 2; 

    SRSOffsetDataF[0] = 0; SRSOffsetDataF[1] = 0; 
    SRSOffsetDataF[2] = 0; SRSOffsetDataF[3] = 0; 
    SRSOffsetDataF[4] = 0; SRSOffsetDataF[5] = 0; 
    SRSOffsetDataF[6] = 0; SRSOffsetDataF[7] = 0; 
    SRSOffsetDataF[8] = 0; SRSOffsetDataF[9] = 0; 

    SRSOffsetDataL[0] = 0; SRSOffsetDataL[1] = 0; 
    SRSOffsetDataL[2] = -1; SRSOffsetDataL[3] = 0; 
    SRSOffsetDataL[4] = -1; SRSOffsetDataL[5] = -1; 
    SRSOffsetDataL[6] = 0; SRSOffsetDataL[7] = 2; 
    SRSOffsetDataL[8] = -1; SRSOffsetDataL[9] = 2; 

    iSRSOffsetDataN[0] = 0; iSRSOffsetDataN[1] = 0; 
    iSRSOffsetDataN[2] = -1; iSRSOffsetDataN[3] = 0; 
    iSRSOffsetDataN[4] = 2; iSRSOffsetDataN[5] = 0; 
    iSRSOffsetDataN[6] = -1; iSRSOffsetDataN[7] = 0; 
    iSRSOffsetDataN[8] = 2; iSRSOffsetDataN[9] = 0; 

    iSRSOffsetDataR[0] = -1; iSRSOffsetDataR[1] = 0; 
    iSRSOffsetDataR[2] = 0; iSRSOffsetDataR[3] = 0; 
    iSRSOffsetDataR[4] = 0; iSRSOffsetDataR[5] = 0; 
    iSRSOffsetDataR[6] = 0; iSRSOffsetDataR[7] = 1; 
    iSRSOffsetDataR[8] = 0; iSRSOffsetDataR[9] = -2; 

    iSRSOffsetDataF[0] = -1; iSRSOffsetDataF[1] = 1; 
    iSRSOffsetDataF[2] = 1; iSRSOffsetDataF[3] = 1; 
    iSRSOffsetDataF[4] = -2; iSRSOffsetDataF[5] = 1; 
    iSRSOffsetDataF[6] = 1; iSRSOffsetDataF[7] = 0; 
    iSRSOffsetDataF[8] = -2; iSRSOffsetDataF[9] = 0; 

    iSRSOffsetDataL[0] = 0; iSRSOffsetDataL[1] = 1; 
    iSRSOffsetDataL[2] = 0; iSRSOffsetDataL[3] = 1; 
    iSRSOffsetDataL[4] = 0; iSRSOffsetDataL[5] = 1; 
    iSRSOffsetDataL[6] = 0; iSRSOffsetDataL[7] = -1; 
    iSRSOffsetDataL[8] = 0; iSRSOffsetDataL[9] = 2; 

    oSRSOffsetDataN[0] = 0; oSRSOffsetDataN[1] = 0; 
    oSRSOffsetDataR[0] = 0; oSRSOffsetDataR[1] = -1; 
    oSRSOffsetDataF[0] = -1; oSRSOffsetDataF[1] = -1; 
    oSRSOffsetDataL[0] = -1; oSRSOffsetDataL[1] = 0; 


    initializeQueue(queue);

    intro();

    temp = '\0';
    while temp != '\n' do {
        temp = inputc();
    }

    while true do {
        if numLinesCleared == 40 then {
            endGame = true;
        }        
        if grabNewPiece then {
            currentPiece = loadNextSriteFromQueue(queue);
            grabNewPiece = false;
            spawnPiece = true;
        }
        if spawnPiece then {
            endGame = not spawnPieceFun(boardSpriteData, boardSpriteSize, currentPiece, currentPieceData, currentPieceSize, locationData);
            spawnPiece = false;
        }

        fallbackData = locationData;

        placeSpriteLayer(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2], 4);
        drawGame(boardSpriteData, boardSpriteSize, queue, heldSprite);
        isolateLayer(boardSpriteData, 0);
        
        if endGame then {
            break;
        }

        temp = inputc();

        if temp != '\n' then {
            input = temp;
            temp = inputc();
        }

        if input == QUIT_KEY then {
            outputstr("are you sure? (y/N)"); outnl();
            temp = inputc();

            if temp == 'y' or temp == 'Y' or temp == QUIT_KEY then {
                break;
            }
        }
        else if input == HARD_DROP_KEY then {

            hardDropFun(boardSpriteData, boardSpriteSize, currentPiece, currentPieceData, currentPieceSize, locationData, lastMoveWasSpin);
            
            spawnPiece = true;
            grabNewPiece = true;
            canSwap = true;
        }
        else if input == SWAP_KEY then {
            if canSwap then {
                if heldSprite == ' ' then {
                    heldSprite = currentPiece;
                    grabNewPiece = true;
                }
                else {
                    temp = heldSprite;
                    heldSprite = currentPiece;
                    currentPiece = temp;
                    spawnPiece = true;
                }

                canSwap = false;
            }
        }
        else if input == CW_KEY then {
            
            locationData[2] = (locationData[2] + 1 ) % 4;
            
            if currentPiece == 'o' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataL, oSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataN, oSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataR, oSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataF, oSRSOffsetDataL);
                }
                
            }
            else if currentPiece == 'i' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataL, iSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataN, iSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataR, iSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataF, iSRSOffsetDataL);
                }
            }
            else {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataL, SRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataN, SRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataR, SRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataF, SRSOffsetDataL);
                }       
            }
        }
        else if input == CCW_KEY then {
            locationData[2] = (locationData[2] - 1) % 4;

            if currentPiece == 'o' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataR, oSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataF, oSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataL, oSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataN, oSRSOffsetDataL);
                }
            }
            else if currentPiece == 'i' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataR, iSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataF, iSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataL, iSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataN, iSRSOffsetDataL);
                }                
            }
            else {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataR, SRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataF, SRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataL, SRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataN, SRSOffsetDataL);
                }       
            }

        }
        else if input == LEFT_KEY then {
            locationData[0] -= 1;
        }
        else if input == RIGHT_KEY then {
            locationData[0] += 1;
        }
        else if input == SOFT_DROP_KEY then {
            locationData[1] += 1;
        }
        else {
            outputstr("unknown command"); outnl();

        }


        if input == CW_KEY or input == CCW_KEY then {
            lastMoveWasSpin = true;
        }
        else {
            lastMoveWasSpin = false;
        }
        

        placementStatus = canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]);

        if placementStatus != VALID and not grabNewPiece then {
            locationData = fallbackData;
        }

    }
    
    outnl();

    if numLinesCleared < 40 then {
        outputstr(" ‚ñó‚ñÑ‚ñÑ‚ññ ‚ñó‚ñÑ‚ññ ‚ñó‚ññ  ‚ñó‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ     ‚ñó‚ñÑ‚ññ ‚ñó‚ññ  ‚ñó‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ñÑ‚ñÑ‚ññ "); outnl();
        outputstr("‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñõ‚ñö‚ñû‚ñú‚ñå‚ñê‚ñå       ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñê‚ñå   ‚ñê‚ñå ‚ñê‚ñå"); outnl();
        outputstr("‚ñê‚ñå‚ñù‚ñú‚ñå‚ñê‚ñõ‚ñÄ‚ñú‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò    ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò‚ñê‚ñõ‚ñÄ‚ñö‚ññ"); outnl();
        outputstr("‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå  ‚ñê‚ñå‚ñê‚ñô‚ñÑ‚ñÑ‚ññ    ‚ñù‚ñö‚ñÑ‚ñû‚ñò ‚ñù‚ñö‚ñû‚ñò ‚ñê‚ñô‚ñÑ‚ñÑ‚ññ‚ñê‚ñå ‚ñê‚ñå"); outnl();

        outnl();
    }
    else {
        outputstr("‚ñó‚ññ  ‚ñó‚ññ‚ñó‚ñÑ‚ññ ‚ñó‚ññ ‚ñó‚ññ    ‚ñó‚ññ ‚ñó‚ññ‚ñó‚ñÑ‚ñÑ‚ñÑ‚ññ‚ñó‚ññ  ‚ñó‚ññ"); outnl();
        outputstr(" ‚ñù‚ñö‚ñû‚ñò‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå    ‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñõ‚ñö‚ññ‚ñê‚ñå"); outnl();
        outputstr("  ‚ñê‚ñå ‚ñê‚ñå ‚ñê‚ñå‚ñê‚ñå ‚ñê‚ñå    ‚ñê‚ñå ‚ñê‚ñå  ‚ñà  ‚ñê‚ñå ‚ñù‚ñú‚ñå"); outnl();
        outputstr("  ‚ñê‚ñå ‚ñù‚ñö‚ñÑ‚ñû‚ñò‚ñù‚ñö‚ñÑ‚ñû‚ñò    ‚ñê‚ñô‚ñà‚ñü‚ñå‚ñó‚ñÑ‚ñà‚ñÑ‚ññ‚ñê‚ñå  ‚ñê‚ñå"); outnl();

        outnl();
        outputstr("40 Lines Cleared!"); outnl();
    }
    outputstr("Lines Cleared: "); output(numLinesCleared); outnl();
    outputstr("Score: "); output(score); outnl();

    outnl();
}

// look, i want credit, and i can't find places (yet) for these.
gimmeCreditFunction() {
    bool gimmeCreditBool;

       // [TODO!]
    gimmeCredit = 5 / 2;
    gimmeCredit = 5 :<: 2;
    gimmeCreditBool = 5 <= 2;

    if true then 
        if true then
            output(1);
        else
            output(1);
    else
        if false then 
            output(1);
    

    while false do
        if false then
            output(1);

    for x = 0 to 10 do 
        if false then
            output(1);

    for x = 0 to 10 do;
}