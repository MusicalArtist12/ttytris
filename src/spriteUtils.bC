#ifndef SPRITEUTILS_BC
#define SPRITEUTILS_BC

#define SPRITE_WIDTH 5
#define SPRITE_HEIGHT 5
#define SPRITE_SIZE 25

#define SHAPES "oiszljt"
#define NUM_SHAPES 7

#define VALID 0
#define COLLISION 1

#define OUT_OF_BOUNDS_NX 2
#define OUT_OF_BOUNDS_PX 3
#define OUT_OF_BOUNDS_NY 4
#define OUT_OF_BOUNDS_PY 5

int TETRASPRITESIZE[2];


// interior border - SPRITESIZE is (num_row, num_col)
addBorderToSprite(int sprite[]; int val; int SPRITESIZE[]; bool top; bool bottom; bool left; bool right) {
    if *sprite != (SPRITESIZE[1] * SPRITESIZE[0]) then {
        outputstr("addBorderToSprite: *sprite != SPRITESIZE[1] * SPRITESIZE[0]"); outnl();
        return;
    }

    if left then {
        for y = 0 to SPRITESIZE[0] * SPRITESIZE[1] by SPRITESIZE[1] do {
            sprite[y] = val;
        }
    }

    if right then {
        for y = 0 to SPRITESIZE[0] * SPRITESIZE[1] by SPRITESIZE[1] do {
            sprite[y + SPRITESIZE[1] - 1] = val;
        }
    }

    if top then {
        for x = 0 to SPRITESIZE[1] do {
            sprite[x] = val;
        }
    }

    if bottom then {
        for x = 0 to SPRITESIZE[1] do {
            sprite[SPRITESIZE[1] * (SPRITESIZE[0] - 1) + x] = val;
        }
    }


}


// sprites from here are 4x4
loadsprite(int sprite[]; char selector) {
    // rotate on column 2, row 2
    // do not allow rotation on o

    if *sprite != SPRITE_SIZE then {
        // 4 rows, 4 columns;
        outputstr("sprite array must be 12 characters long. exiting...");
        return;
    }

    // binary encoding of rotations - 0b0001, 0b0010, 0b0100, 0b1000 for each possible orientation
    // yes... this was painful
    if selector == 'o' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 9; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 12; sprite[12] = 15; sprite[13] = 3; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 6; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'i' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 8; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 10; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 4; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 1;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 10; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 2; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 's' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 3; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 9; sprite[12] = 15; sprite[13] = 6; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 12; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'z' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 1; sprite[7] = 9; sprite[8] = 2; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 12; sprite[12] = 15; sprite[13] = 3; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 8; sprite[17] = 6; sprite[18] = 4; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'l' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 10; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 10; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'j' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 1; sprite[7] = 10; sprite[8] = 2; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 8; sprite[17] = 10; sprite[18] = 4; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 't' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 11; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 13; sprite[12] = 15; sprite[13] = 7; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 14; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    // used for the initial hold slot - null sprite
    else if selector == ' ' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 0; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 0; sprite[12] = 0; sprite[13] = 0; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 0; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else {
        outputstr("unknown sprite selector: ");
        outputc(selector);
    }
}

outputsprite(int sprite[]; int SPRITESIZE[]; char l0[]; char l1[]; char l2[]; char l3[]; char bg[]) {
    char holding;


    for i = 0 to *sprite do {

        if bitIsSet(sprite[i], 0) then {
            outputstr(l0);
        }
        else if bitIsSet(sprite[i], 1) then {
            outputstr(l1);
        }
        else if bitIsSet(sprite[i], 2) then {
            outputstr(l2);
        }
        else if bitIsSet(sprite[i], 3) then {
            outputstr(l3);
        }
        else {
            // output(sprite[i]);
            outputstr(bg);
        }

        if i % SPRITESIZE[1] == SPRITESIZE[1] - 1 then {
            outnl();
        }

    }
}

int outOfBounds(int x; int y; int i; int ii; int BOARDSIZE[]) {
    if (y + i) >= BOARDSIZE[0] then {
        return OUT_OF_BOUNDS_PY;
    }
    else if (y + i) < 0 then {
        return OUT_OF_BOUNDS_NY;
    }
    else if(x + ii) >= BOARDSIZE[1] then {
        return OUT_OF_BOUNDS_PX;
    }
    else if (x + ii) < 0 then {
        return OUT_OF_BOUNDS_NX;
    }
    else {
        return VALID;
    }
}

// returns true if valid, false if invalid. fills location with mask. modifies board.
// position (x, y) is relative to top right of sprite. may be negative
// if location already has data, nothing happens
placeSpriteLayer(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y; int layer; int mask) {

    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {

            if outOfBounds(x, y, i, ii, BOARDSIZE) == VALID and bitIsSet(sprite[i * SPRITESIZE[1] + ii], layer) then {
                
                board[(i + y) * BOARDSIZE[1] + (ii + x)] = mask;
            }


        }
    }
}

// if location already has data, data is replaced
placeSprite(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y) {

    // still need to handle -x, -y, and values greater than the array
    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {
            
            
            if outOfBounds(x, y, i, ii, BOARDSIZE) == VALID then {
                board[(i + y) * BOARDSIZE[1] + (ii + x)] = sprite[i * SPRITESIZE[1] + ii];
            }
        }
    }
}

isolateLayer(int sprite[]; int layer) {
    for i = 0 to *sprite do {
        if bitIsSet(sprite[i], layer) then {
            sprite[i] = power(2, layer);
        }
        else {
            sprite[i] = 0;
        }
    }
}

int canPlacePiece(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y; int rot) {
    // all non-zero values must be contained within the board and not overlapping


    int outOfBoundsStatus: VALID;
    int collisionStatus: VALID;

    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {
            if bitIsSet(sprite[i * SPRITESIZE[1] + ii], rot) then {
                
                // order matters, check for collision first

                outOfBoundsStatus = outOfBoundsStatus :>: outOfBounds(x, y, i, ii, BOARDSIZE);

                if board[(i + y) * BOARDSIZE[1] + (ii + x)] != 0 then {
                    collisionStatus = COLLISION;
                }
            }
        }
    }

    if outOfBoundsStatus != VALID then {
        return outOfBoundsStatus;
    }

    return collisionStatus;
}

moveRowsAboveDown(int board[]; int BOARDSIZE[]; int row) {

    for i = row to -1 by -1 do {
        for ii = 0 to BOARDSIZE[1] do {
            
            if i == 0 then {
                board[ii] = 0;
            }
            else {
                board[i * BOARDSIZE[1] + ii] = board[(i - 1)* BOARDSIZE[1] + ii];
            }
            
        }
    }
}

int removeFullLines(int board[]; int BOARDSIZE[]; int layer) {
    bool lineFull;
    int linesCleared: 0;

    
    for i = 0 to BOARDSIZE[0] do {
        for ii = 0 to BOARDSIZE[1] do {
            lineFull = true;

            if not bitIsSet(board[i * BOARDSIZE[1] + ii], layer) then {
                lineFull = false;
                break;
            }
        }



        if lineFull then {
            linesCleared = linesCleared++;

            for ii = 0 to BOARDSIZE[1] do {
                board[i * BOARDSIZE[1] + ii] = 0;
            }

            moveRowsAboveDown(board, BOARDSIZE, i);
        }
    }

    return linesCleared;
}



#endif