

#DRBC here
#DRBCRUN there

// ttytris
// Julia Abdel-Monem
// Spring 2025, CS445
// Written in bC

// using cpp precompiler - no other comments in this file exist. check out the src folder for more info.

// since I am using a precompiler, i am taking full advantage of #defines to make enums. some return values don't have a logical meaning outside of this

// https://harddrop.com/wiki/Tetris_Guideline
// Random Bag System and Super Rotation System specifically
// T Spins
// Back-To-Back for Tetrises

// follows Tetr.io scoring, somewhatint gimmeCredit;
int gimmeCreditA, gimmeCreditB;

int numLinesCleared;
int score;




flashArray(int arr[]; int val) {
    for i = 0 to *arr do {
        arr[i] = val;
    }
}

outputstr(char string[]) {

    for i = 0 to *string do {
        outputc(string[i]);
    }
}

bool bitIsSet(int num; int bit) {


    while bit > 0 do {
        num /= 2;
        bit = bit--;

    }



    num = num % 2;



    if num == 1 then {
        return true;
    }

    return false;
}


int power(int number; int power) {
    int output: 1;

    for i = power to 0 do {
        output *= number;
    }

    return output;
}
int TETRASPRITESIZE[2];



addBorderToSprite(int sprite[]; int val; int SPRITESIZE[]; bool top; bool bottom; bool left; bool right) {
    if *sprite != (SPRITESIZE[1] * SPRITESIZE[0]) then {
        outputstr("addBorderToSprite: *sprite != SPRITESIZE[1] * SPRITESIZE[0]"); outnl();
        return;
    }

    if left then {
        for y = 0 to SPRITESIZE[0] * SPRITESIZE[1] by SPRITESIZE[1] do {
            sprite[y] = val;
        }
    }

    if right then {
        for y = 0 to SPRITESIZE[0] * SPRITESIZE[1] by SPRITESIZE[1] do {
            sprite[y + SPRITESIZE[1] - 1] = val;
        }
    }

    if top then {
        for x = 0 to SPRITESIZE[1] do {
            sprite[x] = val;
        }
    }

    if bottom then {
        for x = 0 to SPRITESIZE[1] do {
            sprite[SPRITESIZE[1] * (SPRITESIZE[0] - 1) + x] = val;
        }
    }


}



loadsprite(int sprite[]; char selector) {



    if *sprite != 25 then {

        outputstr("sprite array must be 12 characters long. exiting...");
        return;
    }



    if selector == 'o' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 9; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 12; sprite[12] = 15; sprite[13] = 3; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 6; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'i' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 8; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 10; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 4; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 1;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 10; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 2; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 's' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 3; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 9; sprite[12] = 15; sprite[13] = 6; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 12; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'z' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 1; sprite[7] = 9; sprite[8] = 2; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 12; sprite[12] = 15; sprite[13] = 3; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 8; sprite[17] = 6; sprite[18] = 4; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'l' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 8; sprite[7] = 10; sprite[8] = 1; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 4; sprite[17] = 10; sprite[18] = 2; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 'j' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 1; sprite[7] = 10; sprite[8] = 2; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 5; sprite[12] = 15; sprite[13] = 5; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 8; sprite[17] = 10; sprite[18] = 4; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else if selector == 't' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 11; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 13; sprite[12] = 15; sprite[13] = 7; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 14; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }

    else if selector == ' ' then {
        sprite[0] = 0; sprite[1] = 0; sprite[2] = 0; sprite[3] = 0; sprite[4] = 0;
        sprite[5] = 0; sprite[6] = 0; sprite[7] = 0; sprite[8] = 0; sprite[19] = 0;
        sprite[10] = 0; sprite[11] = 0; sprite[12] = 0; sprite[13] = 0; sprite[14] = 0;
        sprite[15] = 0; sprite[16] = 0; sprite[17] = 0; sprite[18] = 0; sprite[19] = 0;
        sprite[20] = 0; sprite[21] = 0; sprite[22] = 0; sprite[23] = 0; sprite[24] = 0;
    }
    else {
        outputstr("unknown sprite selector: ");
        outputc(selector);
    }
}

outputsprite(int sprite[]; int SPRITESIZE[]; char l0[]; char l1[]; char l2[]; char l3[]; char bg[]) {
    char holding;


    for i = 0 to *sprite do {

        if bitIsSet(sprite[i], 0) then {
            outputstr(l0);
        }
        else if bitIsSet(sprite[i], 1) then {
            outputstr(l1);
        }
        else if bitIsSet(sprite[i], 2) then {
            outputstr(l2);
        }
        else if bitIsSet(sprite[i], 3) then {
            outputstr(l3);
        }
        else {

            outputstr(bg);
        }

        if i % SPRITESIZE[1] == SPRITESIZE[1] - 1 then {
            outnl();
        }

    }
}

int outOfBounds(int x; int y; int i; int ii; int BOARDSIZE[]) {
    if (y + i) >= BOARDSIZE[0] then {
        return 5;
    }
    else if (y + i) < 0 then {
        return 4;
    }
    else if(x + ii) >= BOARDSIZE[1] then {
        return 3;
    }
    else if (x + ii) < 0 then {
        return 2;
    }
    else {
        return 0;
    }
}




placeSpriteLayer(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y; int layer; int mask) {

    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {

            if outOfBounds(x, y, i, ii, BOARDSIZE) == 0 and bitIsSet(sprite[i * SPRITESIZE[1] + ii], layer) then {

                board[(i + y) * BOARDSIZE[1] + (ii + x)] = mask;
            }


        }
    }
}


placeSprite(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y) {


    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {


            if outOfBounds(x, y, i, ii, BOARDSIZE) == 0 then {
                board[(i + y) * BOARDSIZE[1] + (ii + x)] = sprite[i * SPRITESIZE[1] + ii];
            }
        }
    }
}

isolateLayer(int sprite[]; int layer) {
    for i = 0 to *sprite do {
        if bitIsSet(sprite[i], layer) then {
            sprite[i] = power(2, layer);
        }
        else {
            sprite[i] = 0;
        }
    }
}

int canPlacePiece(int board[]; int BOARDSIZE[]; int sprite[]; int SPRITESIZE[]; int x; int y; int rot) {



    int outOfBoundsStatus: 0;
    int collisionStatus: 0;

    for i = 0 to SPRITESIZE[0] do {
        for ii = 0 to SPRITESIZE[1] do {
            if bitIsSet(sprite[i * SPRITESIZE[1] + ii], rot) then {



                outOfBoundsStatus = outOfBoundsStatus :>: outOfBounds(x, y, i, ii, BOARDSIZE);

                if board[(i + y) * BOARDSIZE[1] + (ii + x)] != 0 then {
                    collisionStatus = 1;
                }
            }
        }
    }

    if outOfBoundsStatus != 0 then {
        return outOfBoundsStatus;
    }

    return collisionStatus;
}

moveRowsAboveDown(int board[]; int BOARDSIZE[]; int row) {

    for i = row to -1 by -1 do {
        for ii = 0 to BOARDSIZE[1] do {

            if i == 0 then {
                board[ii] = 0;
            }
            else {
                board[i * BOARDSIZE[1] + ii] = board[(i - 1)* BOARDSIZE[1] + ii];
            }

        }
    }
}

int removeFullLines(int board[]; int BOARDSIZE[]; int layer) {
    bool lineFull;
    int linesCleared: 0;


    for i = 0 to BOARDSIZE[0] do {
        for ii = 0 to BOARDSIZE[1] do {
            lineFull = true;

            if not bitIsSet(board[i * BOARDSIZE[1] + ii], layer) then {
                lineFull = false;
                break;
            }
        }



        if lineFull then {
            linesCleared = linesCleared++;

            for ii = 0 to BOARDSIZE[1] do {
                board[i * BOARDSIZE[1] + ii] = 0;
            }

            moveRowsAboveDown(board, BOARDSIZE, i);
        }
    }

    return linesCleared;
}
int generateQueueChecksum(char queue[]) {
    char bag[7];
    int checksum: 0;

    bag = "oiszljt";

    for x = 0 to *queue do {
        for y = 0 to 7 do {
            if queue[x] == bag[y] then {
                checksum += y * power(10, x);
                break;
            }
        }
    }

    return checksum;
}




char loadNextSriteFromQueue(char queue[]) {
    char nextSprite;
    char randomSpriteSel;

    int randomNum: 0;

    static char bag[7];
    static int count: 0;

    if count == 0 then {
        bag = "oiszljt";
        count = 7;
    }

    nextSprite = queue[0];

    for i = 0 to *queue -1 do {
        queue[i] = queue[i + 1];
    }

    randomNum = ?*"oiszljt";

    while bag[randomNum] == ' ' do {
        randomNum = ?*"oiszljt";
    }

    queue[*queue - 1] = bag[randomNum];
    bag[randomNum] = ' ';
    count = count--;





    return nextSprite;
}

initializeQueue(char queue[]) {

    int randomNum: 0;

    char bag[7];

    bag = "oiszljt";


    for i = 0 to 7 do {

        randomNum = ?*"oiszljt";

        while bag[randomNum] == ' ' do {
            randomNum = ?*"oiszljt";
        }

        queue[i] = bag[randomNum];
        bag[randomNum] = ' ';

    }
}
loadHeldSprite(char held; int heldSprite[]; int HELDSPRITESIZE[]) {


    int sprite[25];
    int SPRITESIZE[2];

    flashArray(sprite, 0);

    SPRITESIZE[0] = 5;
    SPRITESIZE[1] = 5;

    HELDSPRITESIZE[0] = 6;
    HELDSPRITESIZE[1] = 6;

    loadsprite(sprite, held);


    flashArray(heldSprite, 0);

    placeSpriteLayer(heldSprite, HELDSPRITESIZE, sprite, SPRITESIZE, 1, 1, 0, 1);


}

loadQueueSprite(char queue[]; int queueOutput[]; int QUEUEOUTPUTSIZE[]) {
    int QUEUENUMROWS;
    int QUEUENUMCOLS;

    int sprite[25];
    int SPRITESIZE[2];



    int index;

    QUEUEOUTPUTSIZE[1] = 6;
    QUEUEOUTPUTSIZE[0] = 5 * 3;

    if QUEUEOUTPUTSIZE[1] * QUEUEOUTPUTSIZE[0] != 90 then {
        outputstr("Error: Queue Output is misconfigured"); outnl();
    }

    SPRITESIZE[0] = 5;
    SPRITESIZE[1] = 5;

    flashArray(queueOutput, 0);

    for i = 0 to 3 do {
        flashArray(sprite, 0);

        index = 0;

        loadsprite(sprite, queue[i]);
        placeSpriteLayer(queueOutput, QUEUEOUTPUTSIZE, sprite, SPRITESIZE, 0, i * 5, 1, 1);

    }




}

loadBoardSprite(int board[]; int BOARDSIZE[]; int boardSprite[]; int OUTPUTBOARDSIZE[]) {


    OUTPUTBOARDSIZE[0] = BOARDSIZE[0] + 1;
    OUTPUTBOARDSIZE[1] = BOARDSIZE[1] + 2;


    flashArray(boardSprite, 8);


    placeSpriteLayer(boardSprite, OUTPUTBOARDSIZE, board, BOARDSIZE, 1, 0, 0, 4);


    placeSpriteLayer(boardSprite, OUTPUTBOARDSIZE, board, BOARDSIZE, 1, 0, 2, 1);


    addBorderToSprite(boardSprite, 2, OUTPUTBOARDSIZE, false, true, true, true);



}
displayControls() {
    outputstr("Controls"); outnl();
    outputc('o'); outputstr(": quit"); outnl();
    outputc('a'); outputstr(": move left"); outnl();
    outputc('d'); outputstr(": move right"); outnl();
    outputc('s'); outputstr(": soft drop (move one down)"); outnl();
    outputc('w'); outputstr(": hard drop (move all the way down and lock piece)"); outnl();
    outputc('q'); outputstr(": rotate counterclockwise"); outnl();
    outputc('e'); outputstr(": rotate clockwise"); outnl();
    outputc('c'); outputstr(": swap"); outnl();

}






bool spawnPieceFun(int boardSpriteData[]; int boardSpriteSize[]; char currentPiece; int currentPieceData[]; int currentPieceSize[]; int locationData[]) {
    int timeout;
    int placementStatus;

    loadsprite(currentPieceData, currentPiece);

    locationData[0] = 3;
    locationData[1] = -4;
    locationData[2] = 0;

    placementStatus = canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]);

    timeout = 0;

    while placementStatus != 0 do {
        if timeout == 10 then {
            return false;
            break;
        }

        if placementStatus == 1 then
            locationData[2] = (locationData[2] + 1) % 4;
        else
            locationData[1] = locationData[1]++;

        timeout = timeout++;

        placementStatus = canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]);
    }

    return true;
}

hardDropFun(int boardSpriteData[]; int boardSpriteSize[]; char currentPiece; int currentPieceData[]; int currentPieceSize[]; int locationData[]; bool lastMoveWasSpin) {
    int height: 0;
    int linesCleared: 0;
    bool isTSpin: false;
    int numCorners: 0;

    int value: 0;

    static bool lastWasTSpin: false;
    static int lastType: 0;
    static int combo: 0;

    while canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]) == 0 do {
        locationData[1] += 1;
        height = height++;
    }


    locationData[1] -= 1;
    height = height--;

    output(height); outnl();
    outputc(currentPiece); outnl();
    outputb(lastMoveWasSpin); outnl();

    placeSpriteLayer(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2], 1);

    score += 2 * height;

    if height == 0 and currentPiece == 't' and lastMoveWasSpin then {
        if boardSpriteData[(locationData[1] + 1) * boardSpriteSize[0] + locationData[0] + 1] != 0 or outOfBounds(locationData[0], locationData[1], 1, 1, boardSpriteSize) != 0 then {
            numCorners = numCorners++;
        }
        if boardSpriteData[(locationData[1] + 1) * boardSpriteSize[0] + locationData[0] + 3] != 0 or outOfBounds(locationData[0], locationData[1], 1, 3, boardSpriteSize) != 0 then {
            numCorners = numCorners++;
        }
        if boardSpriteData[(locationData[1] + 3) * boardSpriteSize[0] + locationData[0] + 1] != 0 or outOfBounds(locationData[0], locationData[1], 3, 1, boardSpriteSize) != 0 then {
            numCorners = numCorners++;
        }
        if boardSpriteData[(locationData[1] + 3) * boardSpriteSize[0] + locationData[0] + 3] != 0 or outOfBounds(locationData[0], locationData[1], 3, 3, boardSpriteSize) != 0 then {
            numCorners = numCorners++;
        }

        if numCorners >= 3 then {
            isTSpin = true;
        }
    }

    linesCleared = removeFullLines(boardSpriteData, boardSpriteSize, 0);
    numLinesCleared += linesCleared;

    if isTSpin then {
        if linesCleared == 0 then {
            value = 400;
        }
        if linesCleared == 1 then {
            value = 800;
        }
        else if linesCleared == 2 then {
            value = 1200;
        }
        else if linesCleared == 3 then {
            value = 1600;
        }

        if lastType == linesCleared and linesCleared > 1 and lastWasTSpin then {
            value += value / 2;
            outputstr("B2B ");
        }

        if linesCleared == 0 then {
            outputstr("T-Spin!");
        }
        if linesCleared == 1 then {
            outputstr("T-Spin Single!");
        }
        else if linesCleared == 2 then {
            outputstr("T-Spin Double!");
        }
        else if linesCleared == 3 then {
            outputstr("T-Spin Triple!");
        }

        outnl();
    }
    else {

        if linesCleared == 1 then {
            value = 100;
        }
        else if linesCleared == 2 then {
            value = 300;
        }
        else if linesCleared == 3 then {
            value = 500;

        }
        else if linesCleared == 4 then {
            value = 800;
        }

        if lastType == linesCleared and linesCleared > 1 then {
            value += value / 2;
            outputstr("B2B ");
        }

        if linesCleared == 1 then {
            outputstr("Single!");
        }
        else if linesCleared == 2 then {
            outputstr("Double!");
        }
        else if linesCleared == 3 then {
            outputstr("Triple!");
        }
        else if linesCleared == 4 then {
            outputstr("Quad!");
        }

        outnl();
    }

    score += value;

    if linesCleared > 0 then {
        lastType = linesCleared;
        lastWasTSpin = isTSpin;
        combo += 1;

        if combo > 1 then {
            outputstr("Combo: "); output(combo);
            score += combo * 50;
        }
    }
    else {
        combo = 0;
    }



}

srsRotationSystem(int boardSpriteData[]; int boardSpriteSize[]; int currentPieceData[]; int currentPieceSize[]; int locationData[]; int SRSOffsetDataFirst[]; int SRSOffsetDataFinal[]) {
    int offsetX, offsetY;

    int backupLocationData[3];

    backupLocationData = locationData;

    if *SRSOffsetDataFirst != *SRSOffsetDataFinal then {
        return;
    }

    for i = 0 to *SRSOffsetDataFirst by 2 do {
        offsetX = SRSOffsetDataFirst[i] - SRSOffsetDataFinal[i];
        offsetY = SRSOffsetDataFirst[i + 1] - SRSOffsetDataFinal[i + 1];



        locationData[0] += offsetX;
        locationData[1] -= offsetY;

        if canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]) == 0 then {
            return;
        }

        locationData = backupLocationData;
    }

    locationData = backupLocationData;
    return;
}


drawGame(int board[], boardSize[]; char queue[]; char held) {

    static char lastHeld: '\0';
    static int lastQueueChecksum: 0;

    int currentQueueChecksum;

    static int heldSprite[36];
    static int heldSpriteSize[2];

    static int boardSprite[252];
    static int boardSpriteSize[2];

    static int queueOutput[90];
    static int queueSpriteSize[2];

    int screenSprite[900];
    int screenSpriteSize[2];

    screenSpriteSize[0] = 30;
    screenSpriteSize[1] = 30;

    flashArray(screenSprite, 2);

    currentQueueChecksum = generateQueueChecksum(queue);

    if lastHeld != held then {
        flashArray(heldSprite, 0);
        loadHeldSprite(held, heldSprite, heldSpriteSize);
    }

    if currentQueueChecksum != lastQueueChecksum then {
        flashArray(queueOutput, 0);
        loadQueueSprite(queue, queueOutput, queueSpriteSize);
        lastQueueChecksum = currentQueueChecksum;
    }

    flashArray(boardSprite, 0);
    loadBoardSprite(board, boardSize, boardSprite, boardSpriteSize);

    placeSprite(screenSprite, screenSpriteSize, heldSprite, heldSpriteSize, 1, 1);
    placeSprite(screenSprite, screenSpriteSize, boardSprite, boardSpriteSize, 1 + heldSpriteSize[1], 1);
    placeSprite(screenSprite, screenSpriteSize, queueOutput, queueSpriteSize, 1 + heldSpriteSize[1] + boardSpriteSize[1], 1);







    outnl();
    outputstr("Current Score: "); output(score); outnl();
    outputstr("Lines Cleared: "); output(numLinesCleared); outnl();
    outputsprite(screenSprite, screenSpriteSize, "██", "🮖🮖", "🮐🮐", "🭽🭾", "  ");
}

intro() {
    char temp: '\0';

    outnl();

    outputstr("▗▄▄▄▖▗▄▄▄▖▗▖  ▗▖▗▄▄▄▖▗▄▄▖ ▗▄▄▄▖ ▗▄▄▖"); outnl();
    outputstr("  █    █   ▝▚▞▘   █  ▐▌ ▐▌  █  ▐▌   "); outnl();
    outputstr("  █    █    ▐▌    █  ▐▛▀▚▖  █   ▝▀▚▖"); outnl();
    outputstr("  █    █    ▐▌    █  ▐▌ ▐▌▗▄█▄▖▗▄▄▞▘"); outnl();

    outnl();

    outputstr("Julia Abdel-Monem, 2024"); outnl();
    outputstr("Written in bC"); outnl();
    outnl();
    outputstr("No affiliation with The Tetris Company or Tetris (r)"); outnl();
    outputstr("version v1.0"); outnl();

    outnl();


    outputstr("this game runs in an infinite loop");
    outnl();
    outputstr("please disable the ant score; bort limit and output limit before running");
    outnl();
    outnl();
    outputstr("press enter to continue or q to quit");
    outnl();

    temp = '\0';
    while temp != '\n' do {
        temp = inputc();

        if temp == 'q' then {
            return;
        }
    }

    outputstr("Goal: Clear 40 lines"); outnl();

    outnl();

    outputstr("Changes from traditional tetris"); outnl();
    outputstr("due to technical limitations, you must hard drop a piece to lock it in place"); outnl();
    outputstr("gravity does not exist - you are free to rotate a piece as much as you want without it falling"); outnl();
    outputstr("board only updates if a change occurs."); outnl();

    outnl();

    displayControls();

    outnl();

    outputstr("pressing enter with a blank input repeats the last sent command"); outnl();

    outputstr("press enter to start"); outnl();

}

main() {

    int SRSOffsetDataN[10];
    int SRSOffsetDataR[10];
    int SRSOffsetDataF[10];
    int SRSOffsetDataL[10];

    int iSRSOffsetDataN[10];
    int iSRSOffsetDataR[10];
    int iSRSOffsetDataF[10];
    int iSRSOffsetDataL[10];

    int oSRSOffsetDataN[2];
    int oSRSOffsetDataR[2];
    int oSRSOffsetDataF[2];
    int oSRSOffsetDataL[2];

    int index;

    int boardSpriteData[200];
    int boardSpriteSize[2];

    char queue[7];


    int locationData[3];
    int fallbackData[3];

    char currentPiece;
    int currentPieceData[25];
    int currentPieceSize[2];

    char input, heldSprite: ' ', temp: '\0';

    int placementStatus, linesCleared;

    bool canSwap: true, spawnPiece: false, grabNewPiece: true, endGame: false, lastMoveWasSpin: false;

    TETRASPRITESIZE[0] = 5;
    TETRASPRITESIZE[1] = 5;

    currentPieceSize = TETRASPRITESIZE;

    canSwap = not not true;

    boardSpriteSize[0] = 20;
    boardSpriteSize[1] = 10;

    locationData[0] = 3;
    locationData[1] = -3;
    locationData[2] = 0;

    numLinesCleared = 0;
    score = 0;

    SRSOffsetDataN[0] = 0; SRSOffsetDataN[1] = 0;
    SRSOffsetDataN[2] = 0; SRSOffsetDataN[3] = 0;
    SRSOffsetDataN[4] = 0; SRSOffsetDataN[5] = 0;
    SRSOffsetDataN[6] = 0; SRSOffsetDataN[7] = 0;
    SRSOffsetDataN[8] = 0; SRSOffsetDataN[9] = 0;

    SRSOffsetDataR[0] = 0; SRSOffsetDataR[1] = 0;
    SRSOffsetDataR[2] = 1; SRSOffsetDataR[3] = 0;
    SRSOffsetDataR[4] = 1; SRSOffsetDataR[5] = -1;
    SRSOffsetDataR[6] = 0; SRSOffsetDataR[7] = 2;
    SRSOffsetDataR[8] = 1; SRSOffsetDataR[9] = 2;

    SRSOffsetDataF[0] = 0; SRSOffsetDataF[1] = 0;
    SRSOffsetDataF[2] = 0; SRSOffsetDataF[3] = 0;
    SRSOffsetDataF[4] = 0; SRSOffsetDataF[5] = 0;
    SRSOffsetDataF[6] = 0; SRSOffsetDataF[7] = 0;
    SRSOffsetDataF[8] = 0; SRSOffsetDataF[9] = 0;

    SRSOffsetDataL[0] = 0; SRSOffsetDataL[1] = 0;
    SRSOffsetDataL[2] = -1; SRSOffsetDataL[3] = 0;
    SRSOffsetDataL[4] = -1; SRSOffsetDataL[5] = -1;
    SRSOffsetDataL[6] = 0; SRSOffsetDataL[7] = 2;
    SRSOffsetDataL[8] = -1; SRSOffsetDataL[9] = 2;

    iSRSOffsetDataN[0] = 0; iSRSOffsetDataN[1] = 0;
    iSRSOffsetDataN[2] = -1; iSRSOffsetDataN[3] = 0;
    iSRSOffsetDataN[4] = 2; iSRSOffsetDataN[5] = 0;
    iSRSOffsetDataN[6] = -1; iSRSOffsetDataN[7] = 0;
    iSRSOffsetDataN[8] = 2; iSRSOffsetDataN[9] = 0;

    iSRSOffsetDataR[0] = -1; iSRSOffsetDataR[1] = 0;
    iSRSOffsetDataR[2] = 0; iSRSOffsetDataR[3] = 0;
    iSRSOffsetDataR[4] = 0; iSRSOffsetDataR[5] = 0;
    iSRSOffsetDataR[6] = 0; iSRSOffsetDataR[7] = 1;
    iSRSOffsetDataR[8] = 0; iSRSOffsetDataR[9] = -2;

    iSRSOffsetDataF[0] = -1; iSRSOffsetDataF[1] = 1;
    iSRSOffsetDataF[2] = 1; iSRSOffsetDataF[3] = 1;
    iSRSOffsetDataF[4] = -2; iSRSOffsetDataF[5] = 1;
    iSRSOffsetDataF[6] = 1; iSRSOffsetDataF[7] = 0;
    iSRSOffsetDataF[8] = -2; iSRSOffsetDataF[9] = 0;

    iSRSOffsetDataL[0] = 0; iSRSOffsetDataL[1] = 1;
    iSRSOffsetDataL[2] = 0; iSRSOffsetDataL[3] = 1;
    iSRSOffsetDataL[4] = 0; iSRSOffsetDataL[5] = 1;
    iSRSOffsetDataL[6] = 0; iSRSOffsetDataL[7] = -1;
    iSRSOffsetDataL[8] = 0; iSRSOffsetDataL[9] = 2;

    oSRSOffsetDataN[0] = 0; oSRSOffsetDataN[1] = 0;
    oSRSOffsetDataR[0] = 0; oSRSOffsetDataR[1] = -1;
    oSRSOffsetDataF[0] = -1; oSRSOffsetDataF[1] = -1;
    oSRSOffsetDataL[0] = -1; oSRSOffsetDataL[1] = 0;


    initializeQueue(queue);

    intro();

    temp = '\0';
    while temp != '\n' do {
        temp = inputc();
    }

    while true do {
        if numLinesCleared == 40 then {
            endGame = true;
        }
        if grabNewPiece then {
            currentPiece = loadNextSriteFromQueue(queue);
            grabNewPiece = false;
            spawnPiece = true;
        }
        if spawnPiece then {
            endGame = not spawnPieceFun(boardSpriteData, boardSpriteSize, currentPiece, currentPieceData, currentPieceSize, locationData);
            spawnPiece = false;
        }

        fallbackData = locationData;

        placeSpriteLayer(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2], 4);
        drawGame(boardSpriteData, boardSpriteSize, queue, heldSprite);
        isolateLayer(boardSpriteData, 0);

        if endGame then {
            break;
        }

        temp = inputc();

        if temp != '\n' then {
            input = temp;
            temp = inputc();
        }

        if input == 'o' then {
            outputstr("are you sure? (y/N)"); outnl();
            temp = inputc();

            if temp == 'y' or temp == 'Y' or temp == 'o' then {
                break;
            }
        }
        else if input == 'w' then {

            hardDropFun(boardSpriteData, boardSpriteSize, currentPiece, currentPieceData, currentPieceSize, locationData, lastMoveWasSpin);

            spawnPiece = true;
            grabNewPiece = true;
            canSwap = true;
        }
        else if input == 'c' then {
            if canSwap then {
                if heldSprite == ' ' then {
                    heldSprite = currentPiece;
                    grabNewPiece = true;
                }
                else {
                    temp = heldSprite;
                    heldSprite = currentPiece;
                    currentPiece = temp;
                    spawnPiece = true;
                }

                canSwap = false;
            }
        }
        else if input == 'e' then {

            locationData[2] = (locationData[2] + 1 ) % 4;

            if currentPiece == 'o' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataL, oSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataN, oSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataR, oSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataF, oSRSOffsetDataL);
                }

            }
            else if currentPiece == 'i' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataL, iSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataN, iSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataR, iSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataF, iSRSOffsetDataL);
                }
            }
            else {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataL, SRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataN, SRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataR, SRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataF, SRSOffsetDataL);
                }
            }
        }
        else if input == 'q' then {
            locationData[2] = (locationData[2] - 1) % 4;

            if currentPiece == 'o' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataR, oSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataF, oSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataL, oSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, oSRSOffsetDataN, oSRSOffsetDataL);
                }
            }
            else if currentPiece == 'i' then {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataR, iSRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataF, iSRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataL, iSRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, iSRSOffsetDataN, iSRSOffsetDataL);
                }
            }
            else {
                if locationData[2] == 0 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataR, SRSOffsetDataN);
                }
                else if locationData[2] == 1 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataF, SRSOffsetDataR);
                }
                else if locationData[2] == 2 then {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataL, SRSOffsetDataF);
                }
                else {
                    srsRotationSystem(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData, SRSOffsetDataN, SRSOffsetDataL);
                }
            }

        }
        else if input == 'a' then {
            locationData[0] -= 1;
        }
        else if input == 'd' then {
            locationData[0] += 1;
        }
        else if input == 's' then {
            locationData[1] += 1;
        }
        else {
            outputstr("unknown command"); outnl();

        }


        if input == 'e' or input == 'q' then {
            lastMoveWasSpin = true;
        }
        else {
            lastMoveWasSpin = false;
        }


        placementStatus = canPlacePiece(boardSpriteData, boardSpriteSize, currentPieceData, currentPieceSize, locationData[0], locationData[1], locationData[2]);

        if placementStatus != 0 and not grabNewPiece then {
            locationData = fallbackData;
        }

    }

    outnl();

    if numLinesCleared < 40 then {
        outputstr(" ▗▄▄▖ ▗▄▖ ▗▖  ▗▖▗▄▄▄▖     ▗▄▖ ▗▖  ▗▖▗▄▄▄▖▗▄▄▖ "); outnl();
        outputstr("▐▌   ▐▌ ▐▌▐▛▚▞▜▌▐▌       ▐▌ ▐▌▐▌  ▐▌▐▌   ▐▌ ▐▌"); outnl();
        outputstr("▐▌▝▜▌▐▛▀▜▌▐▌  ▐▌▐▛▀▀▘    ▐▌ ▐▌▐▌  ▐▌▐▛▀▀▘▐▛▀▚▖"); outnl();
        outputstr("▝▚▄▞▘▐▌ ▐▌▐▌  ▐▌▐▙▄▄▖    ▝▚▄▞▘ ▝▚▞▘ ▐▙▄▄▖▐▌ ▐▌"); outnl();

        outnl();
    }
    else {
        outputstr("▗▖  ▗▖▗▄▖ ▗▖ ▗▖    ▗▖ ▗▖▗▄▄▄▖▗▖  ▗▖"); outnl();
        outputstr(" ▝▚▞▘▐▌ ▐▌▐▌ ▐▌    ▐▌ ▐▌  █  ▐▛▚▖▐▌"); outnl();
        outputstr("  ▐▌ ▐▌ ▐▌▐▌ ▐▌    ▐▌ ▐▌  █  ▐▌ ▝▜▌"); outnl();
        outputstr("  ▐▌ ▝▚▄▞▘▝▚▄▞▘    ▐▙█▟▌▗▄█▄▖▐▌  ▐▌"); outnl();

        outnl();
        outputstr("40 Lines Cleared!"); outnl();
    }
    outputstr("Lines Cleared: "); output(numLinesCleared); outnl();
    outputstr("Score: "); output(score); outnl();

    outnl();
}


gimmeCreditFunction() {
    int gimmeCredit;

    bool gimmeCreditBool;


    gimmeCredit = 5 / 2;
    gimmeCredit = 5 :<: 2;
    gimmeCreditBool = 5 <= 2;

    if true then
        if true then
            output(1);
        else
            output(1);
    else
        if false then
            output(1);


    while false do
        if false then
            output(1);

    for x = 0 to 10 do
        if false then
            output(1);

    for x = 0 to 10 do;
}
